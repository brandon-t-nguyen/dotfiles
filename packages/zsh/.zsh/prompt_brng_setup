prompt_brng_help ()
{
}

prompt_brng_setup ()
{
    prompt_brng_cvs=0
    prompt_brng_signal=0

    for arg in $@; do
        if [[ "$arg" == 'cvs' ]]; then prompt_brng_cvs=1; fi
        if [[ "$arg" == 'signal' ]]; then prompt_brng_signal=1; fi
    done

    add-zsh-hook precmd prompt_brng_precmd
}

git_prompt ()
{
    if [[ $prompt_brng_cvs -eq 1 ]] && command -v git > /dev/null && $(git status --short > /dev/null 2> /dev/null); then
        local prompt="("

        # status checking
        local git_status=$(git status --branch --short --porcelain=2)

        # branch check
        # local branch=$(echo "$git_status" | grep 'branch.head' | sed 's/# branch.head\s*\(.*\)/\1/')
        #i f [[ "$branch" == '(detached)' ]]; then
        local branch=$(git branch --show-current)
        if [[ -z "$branch" ]]; then
            prompt+="%F{red}$(git rev-parse --short HEAD)%f"
        else
            prompt+="%F{green}$branch%f"
        fi

        # upstream check
        local ab=$(echo "$git_status" | grep 'branch\.ab' | sed 's/.*\(+[0-9]\+ -[0-9]\+\).*/\1/')
        local ahead=$(echo "$ab" | sed 's/.*+\([0-9]\+\).*/\1/')
        local behind=$(echo "$ab" | sed 's/.*-\([0-9]\+\).*/\1/')

        if [[ "$ahead" -gt 0 && "$behind" -gt 0 ]]; then
            prompt+=" %F{cyan}↑$ahead%f%F{yellow}↓$behind%f"
        elif [[ "$ahead" -gt 0 ]]; then
            prompt+=" %F{cyan}↑$ahead%f"
        elif [[ "$behind" -gt 0 ]]; then
            prompt+=" %F{yellow}↓$behind%f"
        fi

        # conflict and changed checking
        local conflict_count=$(echo "$git_status" | grep -c '^u')
        if [[ "$conflict_count" -gt 0 ]]; then
            prompt+=" %B%F{magenta}conflicts:%f$conflict_count%f%b"
        else
            local staged_count=$(echo "$git_status" | grep -c '^[12] [MARCD][.MD]')
            local unstaged_count=$(echo "$git_status" | grep -c '^[12] [.MARC][MARCD]')

            if [[ "$staged_count" -gt 0 || "$unstaged_count" -gt 0 ]]; then
                prompt+=" %F{green}$staged_count%f:%F{red}$unstaged_count%f"
            fi
        fi

        prompt+=")"
        echo "$prompt "
    fi
}

decode_signal ()
{
    if [[ $prompt_brng_signal -eq 1 ]]; then
        signum=$(($1 - 128)) # get regular number
        echo "SIG$(kill -l $signum)"
    fi
}

prompt_brng_precmd ()
{
    code=$?

    user="$USER"
    host="%F{cyan}$HOST%f"

    # add trailing / to cwd
    cwd="$(dirs)"
    if ! [[ "$cwd" =~ /$ ]]; then
        cwd+='/'
    fi

    PS1="$user@$host: $cwd $(git_prompt)$ "

    # right prompt: exit code
    if [[ "$code" -eq 0 ]]; then
        RPS1=
    elif [[ "$code" -ge 128 ]]; then
        RPS1="$(decode_signal $code)"
    else
        RPS1="%F{red}✘%f $code"
    fi
}

prompt_brng_setup $@
